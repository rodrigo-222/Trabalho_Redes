#!/usr/bin/env python3
"""
Gerador de tr√°fego melhorado que mant√©m conex√µes ativas
"""

import requests
import socket
import subprocess
import time
import threading
from datetime import datetime

VM_IPS = ["192.168.122.10", "192.168.122.11", "192.168.122.12", "192.168.122.13", "192.168.122.14"]

def create_persistent_connections():
    """Cria conex√µes TCP persistentes."""
    print("üîó Criando conex√µes TCP persistentes...")

    connections = []
    for vm_ip in VM_IPS:
        try:
            # Conex√£o HTTP Keep-Alive
            session = requests.Session()
            session.headers.update({'Connection': 'keep-alive'})

            response = session.get(f"http://{vm_ip}", timeout=5)
            if response.status_code == 200:
                connections.append((vm_ip, session))
                print(f"   ‚úÖ Conex√£o persistente com {vm_ip}")
            else:
                print(f"   ‚ùå Falha HTTP para {vm_ip}: {response.status_code}")

        except Exception as e:
            print(f"   ‚ùå Erro conectando {vm_ip}: {e}")

    return connections

def generate_continuous_traffic():
    """Gera tr√°fego cont√≠nuo."""
    print("üì° Iniciando gera√ß√£o cont√≠nua de tr√°fego...")

    cycle = 0

    try:
        while True:
            cycle += 1
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"\nüîÑ CICLO {cycle} - {timestamp}")

            for vm_ip in VM_IPS:
                # HTTP requests m√∫ltiplas
                for endpoint in ['/', '/test.html', '/data.json']:
                    try:
                        response = requests.get(f"http://{vm_ip}{endpoint}", timeout=2)
                        print(f"   HTTP {vm_ip}{endpoint}: {response.status_code}")
                    except requests.exceptions.ConnectException:
                        print(f"   HTTP {vm_ip}{endpoint}: Conex√£o recusada (servi√ßo inativo)")
                    except Exception as e:
                        print(f"   HTTP {vm_ip}{endpoint}: {str(e)[:30]}...")

                # Conex√µes TCP diretas
                for port, service in [(80, 'HTTP'), (22, 'SSH'), (21, 'FTP')]:
                    try:
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        sock.settimeout(1)
                        result = sock.connect_ex((vm_ip, port))

                        if result == 0:
                            # Mant√©m conex√£o aberta por um tempo
                            if port == 80:
                                sock.send(b"GET / HTTP/1.1\r\nHost: " + vm_ip.encode() + b"\r\n\r\n")
                                data = sock.recv(1024)
                                print(f"   TCP {vm_ip}:{port} ({service}): ‚úÖ {len(data)} bytes")
                            else:
                                print(f"   TCP {vm_ip}:{port} ({service}): ‚úÖ Conectado")

                            time.sleep(0.5)  # Mant√©m conex√£o aberta
                        else:
                            print(f"   TCP {vm_ip}:{port} ({service}): ‚ùå Recusado")

                        sock.close()

                    except Exception as e:
                        print(f"   TCP {vm_ip}:{port} ({service}): ‚ùå {str(e)[:20]}...")

                # Ping cont√≠nuo
                try:
                    result = subprocess.run(['ping', '-c', '1', vm_ip],
                                          capture_output=True, timeout=3)
                    if result.returncode == 0:
                        print(f"   PING {vm_ip}: ‚úÖ")
                    else:
                        print(f"   PING {vm_ip}: ‚ùå")
                except:
                    print(f"   PING {vm_ip}: ‚ùå Timeout")

            print(f"‚úÖ Ciclo {cycle} completo - aguardando 3 segundos...")
            time.sleep(3)

    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  Gerador interrompido ap√≥s {cycle} ciclos")

def background_ping_flood():
    """Ping cont√≠nuo em background."""
    def ping_vm(vm_ip):
        while True:
            try:
                subprocess.run(['ping', '-c', '1', vm_ip], capture_output=True, timeout=2)
                time.sleep(2)
            except:
                time.sleep(5)

    print("üèì Iniciando ping cont√≠nuo em background...")
    for vm_ip in VM_IPS:
        thread = threading.Thread(target=ping_vm, args=(vm_ip,))
        thread.daemon = True
        thread.start()

def main():
    """Fun√ß√£o principal."""
    print("üöÄ GERADOR DE TR√ÅFEGO MELHORADO")
    print("="*50)
    print(f"üéØ VMs: {VM_IPS}")
    print("üîó Criando conex√µes persistentes...")
    print("üì° Gerando tr√°fego cont√≠nuo...")
    print("="*50)

    # Inicia ping em background
    background_ping_flood()

    # Gera tr√°fego principal
    generate_continuous_traffic()

if __name__ == "__main__":
    main()
